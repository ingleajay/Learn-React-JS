{"ast":null,"code":"const {\n  createSlice,\n  createAsyncThunk\n} = require(\"@reduxjs/toolkit\");\n\nexport const STATUS = Object.freeze({\n  IDLE: 'idle',\n  ERROR: 'error',\n  LOADING: 'loading'\n});\nconst ShowUserSlice = createSlice({\n  name: 'users',\n  initialState: {\n    data: [],\n    status: STATUS.IDLE\n  },\n  reducers: {// setUsers(state,action) {\n    //         state.data = action.payload;\n    // },\n    // setStatus(state,action) {\n    //     state.status = action.payload;\n    // }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchUsers.pending, (state, action) => {\n      state.status = STATUS.LOADING;\n    }).addCase(fetchUsers.fulfilled, (state, action) => {\n      state.data = action.payload;\n      state.status = STATUS.IDLE;\n    }).addCase(fetchUsers.rejected, (state, action) => {\n      state.status = STATUS.ERROR;\n    });\n  }\n}); // create thunks to call ApI in reducer\n// export function fetchUsers(){\n//     return async function fetchUsersThunk(dispatch,getState){\n//         dispatch(setStatus(STATUS.LOADING))\n//         try {\n//             const res = await fetch('https://jsonplaceholder.typicode.com/users');\n//             const data = await res.json();\n//             dispatch(setUsers(data));\n//             dispatch(setStatus(STATUS.IDLE))\n//         } catch (error) {\n//             console.log(\"Errror : \" + error)\n//             dispatch(setStatus(STATUS.ERROR))\n//         }\n//     }\n// }\n// Or another method\n\nexport const fetchUsers = createAsyncThunk('users/fetch', async () => {\n  const res = await fetch('https://jsonplaceholder.typicode.com/users');\n  const data = await res.json();\n  return data;\n});\nexport const {\n  setUsers,\n  setStatus\n} = ShowUserSlice.actions;\nexport default ShowUserSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","require","STATUS","Object","freeze","IDLE","ERROR","LOADING","ShowUserSlice","name","initialState","data","status","reducers","extraReducers","builder","addCase","fetchUsers","pending","state","action","fulfilled","payload","rejected","res","fetch","json","setUsers","setStatus","actions","reducer"],"sources":["F:/ReactJs/learnreact/src/components/Redux/ReduxEx2/store/ShowUserSlice.js"],"sourcesContent":["const { createSlice, createAsyncThunk } = require(\"@reduxjs/toolkit\");\r\n\r\nexport const STATUS = Object.freeze({\r\n    IDLE : 'idle',\r\n    ERROR : 'error',\r\n    LOADING : 'loading'\r\n})\r\n\r\nconst ShowUserSlice = createSlice({\r\n    name : 'users',\r\n    initialState : {\r\n        data : [],\r\n        status : STATUS.IDLE\r\n    },\r\n    reducers:{\r\n        // setUsers(state,action) {\r\n        //         state.data = action.payload;\r\n        // },\r\n        // setStatus(state,action) {\r\n        //     state.status = action.payload;\r\n        // }\r\n    }   ,\r\n    extraReducers:(builder)=>{\r\n        builder\r\n        .addCase(fetchUsers.pending,(state,action)=>{\r\n                state.status = STATUS.LOADING;\r\n        })\r\n        .addCase(fetchUsers.fulfilled,(state,action)=>{\r\n            state.data = action.payload;\r\n            state.status = STATUS.IDLE;\r\n        })\r\n        .addCase(fetchUsers.rejected,(state,action)=>{\r\n            state.status = STATUS.ERROR;\r\n        })\r\n    }\r\n})\r\n\r\n// create thunks to call ApI in reducer\r\n// export function fetchUsers(){\r\n//     return async function fetchUsersThunk(dispatch,getState){\r\n//         dispatch(setStatus(STATUS.LOADING))\r\n//         try {\r\n//             const res = await fetch('https://jsonplaceholder.typicode.com/users');\r\n//             const data = await res.json();\r\n//             dispatch(setUsers(data));\r\n//             dispatch(setStatus(STATUS.IDLE))\r\n//         } catch (error) {\r\n//             console.log(\"Errror : \" + error)\r\n//             dispatch(setStatus(STATUS.ERROR))\r\n//         }\r\n//     }\r\n// }\r\n\r\n// Or another method\r\nexport const fetchUsers = createAsyncThunk('users/fetch',async()=>{\r\n    const res = await fetch('https://jsonplaceholder.typicode.com/users');\r\n    const data = await res.json();\r\n    return data;\r\n})\r\n\r\nexport const {setUsers,setStatus} =  ShowUserSlice.actions;\r\n\r\nexport default ShowUserSlice.reducer;"],"mappings":"AAAA,MAAM;EAAEA,WAAF;EAAeC;AAAf,IAAoCC,OAAO,CAAC,kBAAD,CAAjD;;AAEA,OAAO,MAAMC,MAAM,GAAGC,MAAM,CAACC,MAAP,CAAc;EAChCC,IAAI,EAAG,MADyB;EAEhCC,KAAK,EAAG,OAFwB;EAGhCC,OAAO,EAAG;AAHsB,CAAd,CAAf;AAMP,MAAMC,aAAa,GAAGT,WAAW,CAAC;EAC9BU,IAAI,EAAG,OADuB;EAE9BC,YAAY,EAAG;IACXC,IAAI,EAAG,EADI;IAEXC,MAAM,EAAGV,MAAM,CAACG;EAFL,CAFe;EAM9BQ,QAAQ,EAAC,CACL;IACA;IACA;IACA;IACA;IACA;EANK,CANqB;EAc9BC,aAAa,EAAEC,OAAD,IAAW;IACrBA,OAAO,CACNC,OADD,CACSC,UAAU,CAACC,OADpB,EAC4B,CAACC,KAAD,EAAOC,MAAP,KAAgB;MACpCD,KAAK,CAACP,MAAN,GAAeV,MAAM,CAACK,OAAtB;IACP,CAHD,EAICS,OAJD,CAISC,UAAU,CAACI,SAJpB,EAI8B,CAACF,KAAD,EAAOC,MAAP,KAAgB;MAC1CD,KAAK,CAACR,IAAN,GAAaS,MAAM,CAACE,OAApB;MACAH,KAAK,CAACP,MAAN,GAAeV,MAAM,CAACG,IAAtB;IACH,CAPD,EAQCW,OARD,CAQSC,UAAU,CAACM,QARpB,EAQ6B,CAACJ,KAAD,EAAOC,MAAP,KAAgB;MACzCD,KAAK,CAACP,MAAN,GAAeV,MAAM,CAACI,KAAtB;IACH,CAVD;EAWH;AA1B6B,CAAD,CAAjC,C,CA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,OAAO,MAAMW,UAAU,GAAGjB,gBAAgB,CAAC,aAAD,EAAe,YAAS;EAC9D,MAAMwB,GAAG,GAAG,MAAMC,KAAK,CAAC,4CAAD,CAAvB;EACA,MAAMd,IAAI,GAAG,MAAMa,GAAG,CAACE,IAAJ,EAAnB;EACA,OAAOf,IAAP;AACH,CAJyC,CAAnC;AAMP,OAAO,MAAM;EAACgB,QAAD;EAAUC;AAAV,IAAwBpB,aAAa,CAACqB,OAA5C;AAEP,eAAerB,aAAa,CAACsB,OAA7B"},"metadata":{},"sourceType":"module"}